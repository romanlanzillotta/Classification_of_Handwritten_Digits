type: edu
files:
- name: analysis.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    from sklearn.exceptions import ConvergenceWarning
    import warnings

    import re

    # turn off logistic regression convergence warning
    warnings.filterwarnings("ignore", category=ConvergenceWarning)


    # function to provide better feedback
    def get_model_name(line_reply):
        idx = line_reply.replace(" ", "").lower().index('model:') + len('model:')
        model_name_reply = line_reply.replace(" ", "")[idx:]
        return model_name_reply


    def get_lines_with_key_words(lines, keywords):
        lines_with_keywords = []
        for line in lines:
            if set(line.lower().split()) & set(keywords):
                lines_with_keywords.append(line)
        return lines_with_keywords


    class CCATest(StageTest):

        def generate(self):
            return [TestCase(time_limit=60000)]

        def check(self, reply, attach):
            lines = reply.split('\n')
            if "" in lines:
                lines = list(filter(lambda a: a != "", lines))

            relevant_lines = get_lines_with_key_words(lines, keywords=['model:', 'accuracy:', 'question:'])

            # general
            if len(relevant_lines) != 10:
                return CheckResult.wrong(
                    feedback=f"Expected 10 lines with Model:/Accuracy:/Answer to the 1st question:/Answer to the 2nd question:, found {len(relevant_lines)}\n"
                             f"Note that the order of the models in the output is important (see the Example section)")

            # models and accuracies print
            # 1st model
            model_name_answer = 'KNeighborsClassifier'
            if model_name_answer not in relevant_lines[0]:
                model_name_reply = get_model_name(relevant_lines[0])
                return CheckResult.wrong(feedback=f"Incorrect name of the 1st model\n"
                                                  f"Expected {model_name_answer}, found {model_name_reply}")

            accuracy_reply = re.findall(r'\d*\.\d+|\d+', relevant_lines[1])
            if len(accuracy_reply) != 1:
                return CheckResult.wrong(feedback=f'It should be one number in the "Accuracy:" section')
            # 1% error rate is allowed, right accuracy = 0.953
            if not 0.99 * 0.953 < float(accuracy_reply[0]) < 1.01 * 0.953:
                return CheckResult.wrong(feedback=f"Wrong accuracy for the 1st model")

            # 2nd model
            model_name_answer = 'DecisionTreeClassifier'
            if model_name_answer not in relevant_lines[2]:
                model_name_reply = get_model_name(relevant_lines[2])
                return CheckResult.wrong(feedback=f"Incorrect name of the 1st model\n"
                                                  f"Expected {model_name_answer}, found {model_name_reply}")

            accuracy_reply = re.findall(r'\d*\.\d+|\d+', relevant_lines[3])
            if len(accuracy_reply) != 1:
                return CheckResult.wrong(feedback=f'It should be one number in the "Accuracy:" section')
            # 2% error rate is allowed, right accuracy = 0.781
            if not 0.98 * 0.781 < float(accuracy_reply[0]) < 1.02 * 0.781:
                return CheckResult.wrong(feedback=f"Wrong accuracy for the 2nd model")

            # 3rd model
            model_name_answer = 'LogisticRegression'
            if model_name_answer not in relevant_lines[4]:
                model_name_reply = get_model_name(relevant_lines[4])
                return CheckResult.wrong(feedback=f"Incorrect name of the 1st model\n"
                                                  f"Expected {model_name_answer}, found {model_name_reply}")

            accuracy_reply = re.findall(r'\d*\.\d+|\d+', relevant_lines[5])
            if len(accuracy_reply) != 1:
                return CheckResult.wrong(feedback=f'It should be one number in the "Accuracy:" section')
            # 2% error rate is allowed, right accuracy = 0.895
            if not 0.98 * 0.895 < float(accuracy_reply[0]) < 1.02 * 0.895:
                return CheckResult.wrong(feedback=f"Wrong accuracy for the 3rd model")

            # 4th model
            model_name_answer = 'RandomForestClassifier'
            if model_name_answer not in relevant_lines[6]:
                model_name_reply = get_model_name(relevant_lines[6])
                return CheckResult.wrong(feedback=f"{model_name_reply} is incorrect name of the 4th model\n"
                                                  f"Expected {model_name_answer}, found {model_name_reply}")

            accuracy_reply = re.findall(r'\d*\.\d+|\d+', relevant_lines[7])
            if len(accuracy_reply) != 1:
                return CheckResult.wrong(feedback=f'It should be one number in the "Accuracy:" section')
            # 1% error rate is allowed, right accuracy = 0.937
            if not 0.99 * 0.937 < float(accuracy_reply[0]) < 1.01 * 0.937:
                return CheckResult.wrong(feedback=f"Wrong accuracy for the 4th model")

            # 1st question
            answer_reply = relevant_lines[8].replace(" ", "").split('question:')
            if len(answer_reply) < 2:
                return CheckResult.wrong(
                    feedback=f'Did not find the answer to the 1st question. Make sure that you provide the answer in the correct format')
            if 'yes' != answer_reply[1].lower():
                return CheckResult.wrong(
                    feedback=f'Wrong answer to the 1st queston. Make sure that you provide the answer in the correct format')

            # 2nd question
            answer_reply = re.split(r'question:|-|,', relevant_lines[9])
            if len(answer_reply) != 5:
                return CheckResult.wrong(
                    feedback="Didn't find enough information in the answer to the 2nd question.\n"
                             "Make sure that you provide the answer in the correct format with ',' and '-' characters like in the Example section")

            if 'KNeighborsClassifier' not in answer_reply[1]:
                return CheckResult.wrong(feedback=f'Wrong answer to the 2nd question\n'
                                                  f'{answer_reply[1].replace(" ", "")} is incorrect name of the best model')
            if 'RandomForestClassifier' not in answer_reply[3]:
                return CheckResult.wrong(feedback=f'Wrong answer to the 2nd question\n'
                                                  f'{answer_reply[3].replace(" ", "")} is incorrect name of the second best model')

            return CheckResult.correct()


    if __name__ == '__main__':
        CCATest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import CCATest

    if __name__ == '__main__':
        CCATest().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15236#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 14 Jun 2023 13:02:42 UTC"
record: 4
